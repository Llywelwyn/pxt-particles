{"entries":[{"timestamp":1716548119641,"editorVersion":"2.0.2","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"l\"><"],[-1,"variables></variables><"],[0,"bloc"]],"start1":52,"start2":52,"length1":31,"length2":8},{"diffs":[[0," y=\"0\"><"],[1,"statement name=\"HANDLER\"><block type=\"mixer_play_sound\"><field name=\"sound\">music.baDing</field></block></statement><"],[0,"/block><"]],"start1":87,"start2":87,"length1":16,"length2":133}]},{"type":"removed","filename":"main.py","value":"music.ba_ding.play()"},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"music.baDing.play()"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":20}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"Untitled"],[1,"with music"],[0,"\",\n "]],"start1":11,"start2":11,"length1":16,"length2":18},{"diffs":[[0,"son\""],[-1,"\n    ]"],[1,",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.12.2\",\n        \"pxt\": \"8.5.2\"\n    },\n    \"preferredEditor\": \"pyprj\""],[0,"\n}\n"]],"start1":197,"start2":197,"length1":13,"length2":196}]},{"type":"removed","filename":"tilemap.g.jres","value":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}"},{"type":"removed","filename":"tilemap.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"transparency16\":return transparency16;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1716548137682,"editorVersion":"2.0.2","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"son\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ]"],[0,"\n}\n"]],"start1":195,"start2":195,"length1":64,"length2":13}]},{"type":"added","filename":"main.py","value":"\n"}]},{"timestamp":1718042395638,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"son\""],[-1,"\n    ]"],[1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[0,"\n}\n"]],"start1":195,"start2":195,"length1":13,"length2":64}]},{"type":"removed","filename":"main.py","value":"\n"}]},{"timestamp":1718042451690,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"son\""],[-1,",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ]"],[0,"\n}\n"]],"start1":195,"start2":195,"length1":64,"length2":13}]},{"type":"added","filename":"main.py","value":"\n"}]},{"timestamp":1741885098800,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"Pk"],[0,"\n"]],"start1":0,"start2":0,"length1":3,"length2":1}]}]},{"timestamp":1741885245649,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"\n"]],"start1":0,"start2":0,"length1":0,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"ts"],[1,"py"],[0,"prj\"\n}\n"]],"start1":242,"start2":242,"length1":17,"length2":17}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"Pk"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":3}]}]},{"timestamp":1743002649749,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"game.currentScene().physicsEngine = new Arcad"]],"start1":0,"start2":0,"length1":45,"length2":0}]}]},{"timestamp":1743003251445,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rcad"],[-1,"ePhysicsEngine(10000)\r\n\r\nconst f = () => {\r\n    const \r\n    let s = sprites.create(image.create(randint(2, 8), randint(2, 8)))\r\n    s.image.fill(randint(0, 16))\r\n    s.vx = randint(-100, 100)\r\n    s.vy = randint(-100, 100)\r\n\r\n    s.lifespan = randint(10, 1000)\r\n    s.setFlag(SpriteFlag.BounceOnWall, true)\r\n}\r\n\r\nfor (let i = 0; i < 1000; i++) {\r\n    f()\r\n}"]],"start1":41,"start2":41,"length1":361,"length2":4}]}]},{"timestamp":1743004045117,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"nst "],[-1,"MAX_SPEED = 100"],[0,"\r\n  "]],"start1":95,"start2":95,"length1":23,"length2":8},{"diffs":[[0,"    "],[-1,"let angle"],[1,"s.vx"],[0," = r"]],"start1":207,"start2":207,"length1":17,"length2":12},{"diffs":[[0,"int("],[-1,"0, 2 * Math.PI"],[1,"-100, 100"],[0,")\r\n "]],"start1":222,"start2":222,"length1":22,"length2":17},{"diffs":[[0," s.v"],[-1,"x = Math.cos(angle) * MAX_SPEED\r\n    s.vy = Math.sin(angle) * MAX_SPEED"],[1,"y = randint(-100, 100)\r\n"],[0,"\r\n  "]],"start1":241,"start2":241,"length1":79,"length2":32},{"diffs":[[0," i < 100"],[1,"0"],[0,"; i++) {"]],"start1":373,"start2":373,"length1":16,"length2":17},{"diffs":[[0,")\r\n}"],[-1,"\r\n\r\nclass "]],"start1":398,"start2":398,"length1":14,"length2":4}]}]},{"timestamp":1743004661301,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n\r\nc"],[-1,"lass ParticleEffect {\r\n    readonly"],[1,"onst f = () => {\r\n    const"],[0," MAX"]],"start1":67,"start2":67,"length1":43,"length2":35},{"diffs":[[0,"AX_SPEED"],[-1,": number"],[0," = 100\r\n"]],"start1":100,"start2":100,"length1":24,"length2":16},{"diffs":[[0,"    "],[-1,"min_size: number = 1\r\n    max_size: number = 8\r\n\r\n    constructor(n: number) {\r\n        for (let i = 0; i < n; i++) {\r\n            let s = sprites.create(image.create(\r\n                randint(this.min_size, this.max_size),\r\n                randint(this.min_size, this.max_size)\r\n            ))\r\n        "],[1,"let s = sprites.create(image.create(randint(2, 8), randint(2, 8)))\r\n"],[0,"    "]],"start1":116,"start2":116,"length1":312,"length2":76},{"diffs":[[0,"    "],[-1,"        s.lifespan"],[1,"let angle"],[0," = r"]],"start1":222,"start2":222,"length1":26,"length2":17},{"diffs":[[0,"int("],[-1,"1"],[0,"0, "],[-1,"1000)\r\n            s.setFlag(SpriteFlag.BounceOnWall, true)\r\n            this.moveAtRandAngle(s, this."],[1,"2 * Math.PI)\r\n    s.vx = Math.cos(angle) * "],[0,"MAX_"]],"start1":242,"start2":242,"length1":114,"length2":54},{"diffs":[[0,"PEED"],[-1,")"],[0,"\r\n    "],[-1,"        this.moveAtRandSpeed(s)\r\n        }\r\n    }\r\n\r\n    \r\n    private randAngle(): number {\r\n        return"],[1,"s.vy = Math.sin(angle) * MAX_SPEED\r\n    s.lifespan ="],[0," ran"]],"start1":297,"start2":297,"length1":123,"length2":66},{"diffs":[[0,"int("],[1,"1"],[0,"0, "],[-1,"2 * Math.PI)\r\n    }\r\n    private moveAtRandAngle(s: Sprite, speed: number) {\r\n        let angle = this.randAngle()\r\n        s.vx = Math.cos(angle) * speed\r\n        s.vy = Math.sin(angle) * speed\r\n    }\r\n    private moveAtRandSpeed(s: Sprite) {\r\n        s.vx *= 0.5\r\n        s.vy *= 0.5"],[1,"1000)\r\n    s.setFlag(SpriteFlag.BounceOnWall, true)\r\n}\r\n\r\nfor (let i = 0; i < 100; i++) {"],[0,"\r\n    "],[-1,"}"],[1,"f()"],[0,"\r\n}\r\n\r\n"],[-1,"new ParticleEffect(1000)"],[1,"class "]],"start1":364,"start2":364,"length1":330,"length2":119}]}]},{"timestamp":1743005274078,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"000)\r\n\r\n"],[-1,"\r\n\r\n"],[0,"class Pa"]],"start1":62,"start2":62,"length1":20,"length2":16},{"diffs":[[0,"s = "],[-1,"ParticleEffect.spriteOfSize"],[1,"sprites.create(image.create(\r\n                randint"],[0,"(thi"]],"start1":271,"start2":271,"length1":35,"length2":61},{"diffs":[[0,"ax_size)"],[-1,";"],[1,","],[0,"\r\n      "]],"start1":350,"start2":350,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"s.lifespan = randint(10, 1000)\r\n            ParticleEffect.moveAtRandAngle(s, this.MAX_SPEED)\r\n            ParticleEffect.moveAtRandSpeed(s)\r\n            ParticleEffect.setFlags(s"],[1,"    randint(this.min_size, this.max_size)\r\n            ))\r\n            s.image.fill(randint(0, 16)"],[0,")\r\n "]],"start1":369,"start2":369,"length1":187,"length2":106},{"diffs":[[0,"    "],[-1,"}\r\n"],[0,"    "],[-1,"}\r\n\r\n    private static spriteOfSize(min: number, max: number): Sprite {"],[1,"s.lifespan = randint(10, 1000)"],[0,"\r\n  "]],"start1":478,"start2":478,"length1":87,"length2":42},{"diffs":[[0,"    "],[1," "],[-1,"let s = sprites.create(image.create(\r\n            randint(min, max),\r\n            randint(min, max)\r\n        ))\r\n        s.image.fill(randint(0, 16)"],[1,"   s.setFlag(SpriteFlag.BounceOnWall, true)\r\n            this.moveAtRandAngle(s, this.MAX_SPEED)\r\n            this.moveAtRandSpeed(s"],[0,")\r\n "]],"start1":522,"start2":522,"length1":156,"length2":141},{"diffs":[[0,"    "],[-1,"return s"],[1,"}"],[0,"\r\n  "]],"start1":666,"start2":666,"length1":16,"length2":9},{"diffs":[[0," }\r\n"],[1,"\r\n"],[0,"    "],[-1,"private static setFlags(s: Sprite) {\r\n        s.setFlag(SpriteFlag.BounceOnWall, true)\r\n    }"],[0,"\r\n  "]],"start1":676,"start2":676,"length1":105,"length2":14},{"diffs":[[0,"private "],[-1,"static "],[0,"randAngl"]],"start1":692,"start2":692,"length1":23,"length2":16},{"diffs":[[0," }\r\n    private "],[-1,"static "],[0,"moveAtRandAngle("]],"start1":766,"start2":766,"length1":39,"length2":32},{"diffs":[[0,"angle = "],[-1,"ParticleEffect"],[1,"this"],[0,".randAng"]],"start1":839,"start2":839,"length1":30,"length2":20},{"diffs":[[0,"ate "],[-1,"static "],[0,"move"]],"start1":960,"start2":960,"length1":15,"length2":8}]}]},{"timestamp":1743005939491,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\r\n\r\n"],[-1,"interface ParticleConfig {\r\n    minSize?: number;\r\n    maxSize?: number;\r\n    speed?: number;\r\n    speedRange?: boolean;\r\n    lifespan?: number;\r\n    lifespanRange?: boolean;\r\n    bouncy?: boolean;\r\n}\r\n\r\nclass Particle"],[0,"\r\n\r\n"]],"start1":66,"start2":66,"length1":226,"length2":8},{"diffs":[[0,"    "],[-1,"minSize"],[1,"readonly MAX_SPEED"],[0,": number"],[-1,";"],[1," = 100"],[0,"\r\n    m"],[-1,"axSize: number;\r\n    speed: number;\r\n    speedRange: boolean;\r\n    lifespan: number;\r\n    lifespanRange: boolean;\r\n    bouncy: boolean;\r\n\r\n    constructor(n: number, config:  ParticleConfig = {}) {\r\n        this.minSize = config.minSize ? config.minSize : 1;\r\n        this.maxSize = config.maxSize ? config.maxSize : 8;\r\n        this.speed = config.speed ? config.speed : 100;\r\n        this.speedRange = config.speedRange ? config.speedRange : false;\r\n        this.lifespan = config.lifespan ? config.lifespan : 1000;\r\n        this.lifespanRange = config.lifespanRange ? config.lifespanRange : true;\r\n        this.bouncy = config.bouncy ? config.bouncy : true;\r\n"],[1,"in_size: number = 1\r\n    max_size: number = 8\r\n\r\n    constructor(n: number) {"],[0,"\r\n  "]],"start1":98,"start2":98,"length1":693,"length2":124},{"diffs":[[0,"this.min"],[-1,"S"],[1,"_s"],[0,"ize, thi"]],"start1":307,"start2":307,"length1":17,"length2":18},{"diffs":[[0,"this.max"],[-1,"S"],[1,"_s"],[0,"ize);\r\n "]],"start1":322,"start2":322,"length1":17,"length2":18},{"diffs":[[0,"an ="],[-1," this.lifespanRange ?"],[0," ran"]],"start1":359,"start2":359,"length1":29,"length2":8},{"diffs":[[0,"nt(1"],[1,"0"],[0,", "],[-1,"this.lifespan) : this.lifespan"],[1,"1000)"],[0,"\r\n  "]],"start1":369,"start2":369,"length1":40,"length2":16},{"diffs":[[0,"dAngle(s"],[1,", this.MAX_SPEED"],[0,")\r\n     "]],"start1":419,"start2":419,"length1":16,"length2":32},{"diffs":[[0,"veAt"],[1,"Rand"],[0,"Speed(s"],[-1,", this.speed, true"],[0,")\r\n "]],"start1":475,"start2":475,"length1":33,"length2":19},{"diffs":[[0,"dAngle(s: Sprite"],[1,", speed: number"],[0,") {\r\n        let"]],"start1":1022,"start2":1022,"length1":32,"length2":47},{"diffs":[[0,"h.cos(angle)"],[1," * speed"],[0,"\r\n        s."]],"start1":1124,"start2":1124,"length1":24,"length2":32},{"diffs":[[0,"n(angle)"],[1," * speed"],[0,"\r\n    }\r"]],"start1":1168,"start2":1168,"length1":16,"length2":24},{"diffs":[[0,"c moveAt"],[1,"Rand"],[0,"Speed(s:"]],"start1":1210,"start2":1210,"length1":16,"length2":20},{"diffs":[[0,"rite"],[-1,", speed: number, varies: boolean) {\r\n        s.vx *= varies ? randint(0, speed) : speed\r\n        s.vy *= varies ? randint(0, speed) : speed"],[1,") {\r\n        s.vx *= 0.5\r\n        s.vy *= 0.5"],[0,"\r\n  "]],"start1":1233,"start2":1233,"length1":147,"length2":53},{"diffs":[[0,"1000"],[-1,", {}"],[0,")"]],"start1":1315,"start2":1315,"length1":9,"length2":5}]}]},{"timestamp":1743006616604,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"icle"],[-1,"Presets {\r\n    static readonly circle: ParticleConfig = {};\r\n}\r\n\r\nclass ParticleEffect {\r\n    numOfParticles: number;"],[1,"\r\n\r\nclass ParticleEffect {"],[0,"\r\n  "]],"start1":284,"start2":284,"length1":125,"length2":34},{"diffs":[[0," {\r\n"],[-1,"        this.numOfParticles = n;\r\n        this.setConfig(config);\r\n    }\r\n\r\n    public setConfig(config: ParticleConfig) {\r\n"],[0,"    "]],"start1":538,"start2":538,"length1":132,"length2":8},{"diffs":[[0,"e;\r\n"],[-1,"    }\r\n\r\n    public go() {"],[0,"\r\n  "]],"start1":1001,"start2":1001,"length1":34,"length2":8},{"diffs":[[0,"i < "],[-1,"this.numOfParticles"],[1,"n"],[0,"; i+"]],"start1":1031,"start2":1031,"length1":27,"length2":9},{"diffs":[[0,"nWall, t"],[-1,"his.b"],[1,"rue"],[0,")\r\n    }"]],"start1":1712,"start2":1712,"length1":21,"length2":19},{"diffs":[[0,"\r\n\r\n"],[-1,"let e = "],[0,"new "]],"start1":2179,"start2":2179,"length1":16,"length2":8},{"diffs":[[0,"00, "],[-1,"ParticlePresets.circle)\r\ne.go("],[1,"{}"],[0,")"]],"start1":2204,"start2":2204,"length1":35,"length2":7}]}]},{"timestamp":1743007230710,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"};\r\n"],[-1,"    static readonly \r\n"],[0,"}\r\n\r"]],"start1":345,"start2":345,"length1":30,"length2":8},{"diffs":[[0,"            "],[-1,"this"],[1,"ParticleEffect"],[0,".setFlags(s)"]],"start1":1580,"start2":1580,"length1":28,"length2":38},{"diffs":[[0,"private "],[1,"static "],[0,"setFlags"]],"start1":1897,"start2":1897,"length1":16,"length2":23},{"diffs":[[0,", this.b"],[-1,"ouncy"],[0,")\r\n    }"]],"start1":1976,"start2":1976,"length1":21,"length2":16}]}]},{"timestamp":1743007842907,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," = {"],[-1," lifespanRange: true, speedRange: true };\r\n    static readonly ring: ParticleConfig = { lifespanRange: true, speedRange: false }"],[1,"};\r\n    static readonly "],[0,"\r\n}\r"]],"start1":341,"start2":341,"length1":136,"length2":32},{"diffs":[[0,"lifespanRange : "],[-1,"fals"],[1,"tru"],[0,"e;\r\n        this"]],"start1":1158,"start2":1158,"length1":36,"length2":35},{"diffs":[[0,"speed, t"],[-1,"his.speedRang"],[1,"ru"],[0,"e)\r\n    "]],"start1":1588,"start2":1588,"length1":29,"length2":18},{"diffs":[[0,"ets."],[-1,"ring"],[1,"circle"],[0,")\r\ne"]],"start1":2499,"start2":2499,"length1":12,"length2":14}]}]},{"timestamp":1743008442939,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n;\r\n"],[-1,"    direction?: number;\r\n    angle?: number;\r\n"],[0,"}\r\n\r"]],"start1":265,"start2":265,"length1":54,"length2":8},{"diffs":[[0,"an;\r"],[-1,"\n    direction: number;\r\n    angle: number;\r"],[0,"\n\r\n "]],"start1":692,"start2":692,"length1":52,"length2":8},{"diffs":[[0,"e;\r\n"],[-1,"        this.direction = config.direction ? config.direction : 0;\r\n        this.angle = config.angle ? config.angle : 2 * Math.PI;\r\n"],[0,"    "]],"start1":1343,"start2":1343,"length1":140,"length2":8},{"diffs":[[0,"gle("],[-1,"dir: number = 0, max_angle: number = 2 * Math.PI"],[0,"): n"]],"start1":2145,"start2":2145,"length1":56,"length2":8},{"diffs":[[0,"(0, "],[-1,"max_angle"],[1,"2 * Math.PI"],[0,")\r\n "]],"start1":2184,"start2":2184,"length1":17,"length2":19},{"diffs":[[0,"private "],[1,"static "],[0,"moveAtRa"]],"start1":2213,"start2":2213,"length1":16,"length2":23},{"diffs":[[0,"gle("],[-1,"this.direction, this.angle"],[0,")\r\n "]],"start1":2299,"start2":2299,"length1":34,"length2":8}]}]},{"timestamp":1743009043746,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"this"],[1,"ParticleEffect"],[0,".moveAtR"]],"start1":1825,"start2":1825,"length1":20,"length2":30},{"diffs":[[0,"    "],[-1,"const lower = -Math.PI/2 - max_angle/2 + dir;\r\n        const upper = -Math.PI/2 - max_angle/2 + max_angle + dir;\r\n        return randint(lower, upper"],[1,"return randint(0, max_angle"],[0,")\r\n "]],"start1":2436,"start2":2436,"length1":157,"length2":35},{"diffs":[[0,"\r\n\r\n"],[-1,"class ParticleFactory {\r\n    fx: ParticleEffect[]\r\n\r\n    constructor() {\r\n        this.fx = []\r\n    }\r\n\r\n    public add(e: ParticleEffect) {\r\n        this.fx.push(e);\r\n    }\r\n\r\n    public go() {\r\n        this.fx.forEach((e) => { e.go() })\r\n    }\r\n}\r\n\r\nlet factory = new ParticleFactory;\r\n"],[0,"let "]],"start1":2853,"start2":2853,"length1":296,"length2":8},{"diffs":[[0,"fect(100"],[1,"0"],[0,", Partic"]],"start1":2879,"start2":2879,"length1":16,"length2":17},{"diffs":[[0,"g)\r\n"],[-1,"factory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory"],[1,"e"],[0,".go("]],"start1":2909,"start2":2909,"length1":351,"length2":9}]}]},{"timestamp":1743009520568,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e : "],[-1,"4"],[1,"8"],[0,";\r\n "]],"start1":1087,"start2":1087,"length1":9,"length2":9},{"diffs":[[0,"y)\r\n"],[-1,"        s.setFlag(SpriteFlag.AutoDestroy, true)\r\n"],[0,"    "]],"start1":2321,"start2":2321,"length1":57,"length2":8},{"diffs":[[0,"ct[]"],[-1," = []"],[0,"\r\n\r\n"]],"start1":3014,"start2":3014,"length1":13,"length2":8},{"diffs":[[0,"ctor() {"],[1,"\r\n        this.fx = []\r\n    "],[0,"}\r\n\r\n   "]],"start1":3033,"start2":3033,"length1":16,"length2":44},{"diffs":[[0,"ffect) {"],[1,"\r\n       "],[0," this.fx"]],"start1":3101,"start2":3101,"length1":16,"length2":25},{"diffs":[[0,"push(e);"],[1,"\r\n   "],[0," }\r\n"],[1,"\r\n"],[0,"    publ"]],"start1":3127,"start2":3127,"length1":20,"length2":27},{"diffs":[[0,"c go() {"],[1,"\r\n       "],[0," this.fx"]],"start1":3155,"start2":3155,"length1":16,"length2":25},{"diffs":[[0,".go() })"],[1,"\r\n   "],[0," }\r\n}\r\n\r"]],"start1":3199,"start2":3199,"length1":16,"length2":21},{"diffs":[[0,"fect(100"],[-1,"0"],[0,", Partic"]],"start1":3279,"start2":3279,"length1":17,"length2":16},{"diffs":[[0,"ets."],[-1,"circle)\r\n"],[1,"ring)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)\r\nfactory.add(e)"],[0,"\r\nfa"]],"start1":3301,"start2":3301,"length1":17,"length2":333}]}]},{"timestamp":1743010189341,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"Presets."],[-1,"ring"],[1,"circle"],[0,")\r\n\r\nfac"]],"start1":3294,"start2":3294,"length1":20,"length2":22}]}]},{"timestamp":1743010726835,"editorVersion":"2.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":60}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\r\n\r\n"],[-1,"    static readonly RADIANS_IN_A_DEGREE: number = Math.PI / 180\r\n\r\n"],[0,"    "]],"start1":785,"start2":785,"length1":75,"length2":8},{"diffs":[[0,"\r\n\r\n"],[-1,"    public setDirection(n: number, usingRadians: boolean = false) {\r\n        this.direction = usingRadians? n : n * ParticleEffect.RADIANS_IN_A_DEGREE\r\n    }\r\n\r\n    public setAngle(n: number, usingRadians: boolean = false) {\r\n        this.angle = usingRadians ? n : n * ParticleEffect.RADIANS_IN_A_DEGREE\r\n    }\r\n\r\n"],[0,"    "]],"start1":1574,"start2":1574,"length1":323,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":222,"start2":222,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1716548119640,"editorVersion":"2.0.2","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"mixer_play_sound\"><field name=\"sound\">music.baDing</field></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"music.ba_ding.play()","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"with music\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.12.2\",\n        \"pxt\": \"8.5.2\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1718042395638,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1741885098800,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1743002649749,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743004452526,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"game.currentScene().physicsEngine = new ArcadePhysicsEngine(10000)\r\n\r\nconst f = () => {\r\n    const MAX_SPEED = 100\r\n    let s = sprites.create(image.create(randint(2, 8), randint(2, 8)))\r\n    s.image.fill(randint(0, 16))\r\n    let angle = randint(0, 2 * Math.PI)\r\n    s.vx = Math.cos(angle) * MAX_SPEED\r\n    s.vy = Math.sin(angle) * MAX_SPEED\r\n    s.lifespan = randint(10, 1000)\r\n    s.setFlag(SpriteFlag.BounceOnWall, true)\r\n}\r\n\r\nfor (let i = 0; i < 100; i++) {\r\n    f()\r\n}\r\n\r\nclass ParticleEffect {\r\n    readonly MAX_SPEED: number = 100\r\n    min_size: number = 1\r\n    max_size: number = 8\r\n\r\n    constructor() {\r\n        let s = sprites.create(image.create(\r\n            randint(this.min_size, this.max_size),\r\n            randint(this.min_size, this.max_size)\r\n        ))\r\n        s.image.fill(randint(0, 16))\r\n        let angle = this.randAngle()\r\n\r\n    }\r\n\r\n    private randAngle(): number {\r\n        return randint(0, 2 * Math.PI)\r\n    }\r\n    private moveAtRandAngle(s: Sprite, speed: number) {\r\n        let angle = this.randAngle()\r\n        s.vx = Math.cos(angle) * speed\r\n        s.vy = Math.sin(angle) * speed\r\n    }\r\n}","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743006256566,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"game.currentScene().physicsEngine = new ArcadePhysicsEngine(10000)\r\n\r\ninterface ParticleConfig {\r\n    minSize?: number;\r\n    maxSize?: number;\r\n    speed?: number;\r\n    speedRange?: boolean;\r\n    lifespan?: number;\r\n    lifespanRange?: boolean;\r\n    bouncy?: boolean;\r\n}\r\n\r\nclass ParticlePresets {\r\n    static readonly circle: ParticleConfig = {};\r\n}\r\n\r\nclass ParticleEffect {\r\n    numOfParticles: number;\r\n    minSize: number;\r\n    maxSize: number;\r\n    speed: number;\r\n    speedRange: boolean;\r\n    lifespan: number;\r\n    lifespanRange: boolean;\r\n    bouncy: boolean;\r\n\r\n    constructor(n: number, config:  ParticleConfig = {}) {\r\n        this.numOfParticles = n;\r\n        this.setConfig(config);\r\n    }\r\n\r\n    public go() {\r\n        for (let i = 0; i < this.numOfParticles; i++) {\r\n            let s = ParticleEffect.spriteOfSize(this.minSize, this.maxSize);\r\n            s.lifespan = this.lifespanRange ? randint(1, this.lifespan) : this.lifespan\r\n            ParticleEffect.moveAtRandAngle(s)\r\n            ParticleEffect.moveAtSpeed(s, this.speed, true)\r\n            ParticleEffect.setFlags(s)\r\n        }\r\n    }\r\n\r\n    public setConfig(config: ParticleConfig) {\r\n        this.minSize = config.minSize ? config.minSize : 1;\r\n        this.maxSize = config.maxSize ? config.maxSize : 8;\r\n        this.speed = config.speed ? config.speed : 100;\r\n        this.speedRange = config.speedRange ? config.speedRange : false;\r\n        this.lifespan = config.lifespan ? config.lifespan : 1000;\r\n        this.lifespanRange = config.lifespanRange ? config.lifespanRange : true;\r\n        this.bouncy = config.bouncy ? config.bouncy : true;\r\n    }\r\n\r\n    private static spriteOfSize(min: number, max: number): Sprite {\r\n        let s = sprites.create(image.create(\r\n            randint(min, max),\r\n            randint(min, max)\r\n        ))\r\n        s.image.fill(randint(0, 16))\r\n        return s\r\n    }\r\n    private static setFlags(s: Sprite) {\r\n        s.setFlag(SpriteFlag.BounceOnWall, true)\r\n    }\r\n    private static randAngle(): number {\r\n        return randint(0, 2 * Math.PI)\r\n    }\r\n    private static moveAtRandAngle(s: Sprite) {\r\n        let angle = ParticleEffect.randAngle()\r\n        s.vx = Math.cos(angle)\r\n        s.vy = Math.sin(angle)\r\n    }\r\n    private static moveAtSpeed(s: Sprite, speed: number, varies: boolean) {\r\n        s.vx *= varies ? randint(0, speed) : speed\r\n        s.vy *= varies ? randint(0, speed) : speed\r\n    }\r\n}\r\n\r\nlet effect = new ParticleEffect(1000, ParticlePresets.circle)","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743008057076,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"game.currentScene().physicsEngine = new ArcadePhysicsEngine(10000)\r\n\r\ninterface ParticleConfig {\r\n    minSize?: number;\r\n    maxSize?: number;\r\n    speed?: number;\r\n    speedRange?: boolean;\r\n    lifespan?: number;\r\n    lifespanRange?: boolean;\r\n    bouncy?: boolean;\r\n}\r\n\r\nclass ParticlePresets {\r\n    static readonly circle: ParticleConfig = { lifespanRange: true, speedRange: true };\r\n    static readonly ring: ParticleConfig = { lifespanRange: true, speedRange: false }\r\n}\r\n\r\nclass ParticleEffect {\r\n    numOfParticles: number;\r\n    minSize: number;\r\n    maxSize: number;\r\n    speed: number;\r\n    speedRange: boolean;\r\n    lifespan: number;\r\n    lifespanRange: boolean;\r\n    bouncy: boolean;\r\n    direction:\r\n\r\n    constructor(n: number, config:  ParticleConfig = {}) {\r\n        this.numOfParticles = n;\r\n        this.setConfig(config);\r\n    }\r\n\r\n    public setConfig(config: ParticleConfig) {\r\n        this.minSize = config.minSize ? config.minSize : 1;\r\n        this.maxSize = config.maxSize ? config.maxSize : 8;\r\n        this.speed = config.speed ? config.speed : 100;\r\n        this.speedRange = config.speedRange ? config.speedRange : false;\r\n        this.lifespan = config.lifespan ? config.lifespan : 1000;\r\n        this.lifespanRange = config.lifespanRange ? config.lifespanRange : false;\r\n        this.bouncy = config.bouncy ? config.bouncy : true;\r\n    }\r\n\r\n    public go() {\r\n        for (let i = 0; i < this.numOfParticles; i++) {\r\n            let s = ParticleEffect.spriteOfSize(this.minSize, this.maxSize);\r\n            s.lifespan = this.lifespanRange ? randint(1, this.lifespan) : this.lifespan\r\n            ParticleEffect.moveAtRandAngle(s)\r\n            ParticleEffect.moveAtSpeed(s, this.speed, this.speedRange)\r\n            this.setFlags(s)\r\n        }\r\n    }\r\n\r\n    private static spriteOfSize(min: number, max: number): Sprite {\r\n        let s = sprites.create(image.create(\r\n            randint(min, max),\r\n            randint(min, max)\r\n        ))\r\n        s.image.fill(randint(0, 16))\r\n        return s\r\n    }\r\n    private setFlags(s: Sprite) {\r\n        s.setFlag(SpriteFlag.BounceOnWall, this.bouncy)\r\n    }\r\n    private static randAngle(range: number = 2 * Math.PI): number {\r\n        return randint(0, range)\r\n    }\r\n    private static moveAtRandAngle(s: Sprite) {\r\n        let angle = ParticleEffect.randAngle()\r\n        s.vx = Math.cos(angle)\r\n        s.vy = Math.sin(angle)\r\n    }\r\n    private static moveAtSpeed(s: Sprite, speed: number, varies: boolean) {\r\n        s.vx *= varies ? randint(0, speed) : speed\r\n        s.vy *= varies ? randint(0, speed) : speed\r\n    }\r\n}\r\n\r\nlet e = new ParticleEffect(1000, ParticlePresets.ring)\r\ne.go()","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1743010183972,"editorVersion":"2.0.3","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"game.currentScene().physicsEngine = new ArcadePhysicsEngine(10000)\r\n\r\ninterface ParticleConfig {\r\n    minSize?: number;\r\n    maxSize?: number;\r\n    speed?: number;\r\n    speedRange?: boolean;\r\n    lifespan?: number;\r\n    lifespanRange?: boolean;\r\n    bouncy?: boolean;\r\n    direction?: number;\r\n    angle?: number;\r\n}\r\n\r\nclass ParticlePresets {\r\n    static readonly circle: ParticleConfig = { lifespanRange: true, speedRange: true };\r\n    static readonly ring: ParticleConfig = { lifespanRange: true, speedRange: false }\r\n}\r\n\r\nclass ParticleEffect {\r\n    numOfParticles: number;\r\n    minSize: number;\r\n    maxSize: number;\r\n    speed: number;\r\n    speedRange: boolean;\r\n    lifespan: number;\r\n    lifespanRange: boolean;\r\n    bouncy: boolean;\r\n    direction: number;\r\n    angle: number;\r\n\r\n    constructor(n: number, config:  ParticleConfig = {}) {\r\n        this.numOfParticles = n;\r\n        this.setConfig(config);\r\n    }\r\n\r\n    public setConfig(config: ParticleConfig) {\r\n        this.minSize = config.minSize ? config.minSize : 1;\r\n        this.maxSize = config.maxSize ? config.maxSize : 4;\r\n        this.speed = config.speed ? config.speed : 100;\r\n        this.speedRange = config.speedRange ? config.speedRange : false;\r\n        this.lifespan = config.lifespan ? config.lifespan : 1000;\r\n        this.lifespanRange = config.lifespanRange ? config.lifespanRange : false;\r\n        this.bouncy = config.bouncy ? config.bouncy : true;\r\n        this.direction = config.direction ? config.direction : 0;\r\n        this.angle = config.angle ? config.angle : 2 * Math.PI;\r\n    }\r\n\r\n    public go() {\r\n        for (let i = 0; i < this.numOfParticles; i++) {\r\n            let s = ParticleEffect.spriteOfSize(this.minSize, this.maxSize);\r\n            s.lifespan = this.lifespanRange ? randint(1, this.lifespan) : this.lifespan\r\n            this.moveAtRandAngle(s)\r\n            ParticleEffect.moveAtSpeed(s, this.speed, this.speedRange)\r\n            this.setFlags(s)\r\n        }\r\n    }\r\n\r\n    private static spriteOfSize(min: number, max: number): Sprite {\r\n        let s = sprites.create(image.create(\r\n            randint(min, max),\r\n            randint(min, max)\r\n        ))\r\n        s.image.fill(randint(0, 16))\r\n        return s\r\n    }\r\n    private setFlags(s: Sprite) {\r\n        s.setFlag(SpriteFlag.BounceOnWall, this.bouncy)\r\n        s.setFlag(SpriteFlag.AutoDestroy, true)\r\n    }\r\n    private static randAngle(dir: number = 0, max_angle: number = 2 * Math.PI): number {\r\n        const lower = -Math.PI/2 - max_angle/2 + dir;\r\n        const upper = -Math.PI/2 - max_angle/2 + max_angle + dir;\r\n        return randint(lower, upper)\r\n    }\r\n    private moveAtRandAngle(s: Sprite) {\r\n        let angle = ParticleEffect.randAngle(this.direction, this.angle)\r\n        s.vx = Math.cos(angle)\r\n        s.vy = Math.sin(angle)\r\n    }\r\n    private static moveAtSpeed(s: Sprite, speed: number, varies: boolean) {\r\n        s.vx *= varies ? randint(0, speed) : speed\r\n        s.vy *= varies ? randint(0, speed) : speed\r\n    }\r\n}\r\n\r\nclass ParticleFactory {\r\n    fx: ParticleEffect[] = []\r\n\r\n    constructor() {}\r\n\r\n    public add(e: ParticleEffect) { this.fx.push(e); }\r\n    public go() { this.fx.forEach((e) => { e.go() }) }\r\n}\r\n\r\nlet factory = new ParticleFactory;\r\nlet e = new ParticleEffect(1000, ParticlePresets.circle)\r\n\r\nfactory.add(e)\r\nfactory.go()","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"Untitled\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[]}